// -----------------------------------------------------------------------
// File pred03\patternMatching.g
// Examples of pattern matching
// with  lists of int  and  lists of lists of int
//
// Does not contain token or phrase predicates.
// -----------------------------------------------------------------------
root
   pm1_01(int[])
   pm1_01(int[10])
   pm1_02(int[10,20,30])
   pm1_02(int[10,20,30,40])
   pm1_02(int[10,20])
   pm1_03(int[10,20])
   pm1_03(int[10,20,30])
   pm1_03(int[10])
   pm1_04(int[10,20,30])
   pm1_04(int[10])
   pm1_04(int[])
   pm1_05(int[10,20,30])
   pm1_05(int[11,20,30])
   pm1_06(int[10,20,30])
   pm1_06(int[10])
   pm1_06(int[])

   pm2_01(int[][])
   pm2_01(int[][int[10]])
   pm2_01(int[][int[]])
   pm2_02(int[][int[10,20,30],int[40,50]])
   pm2_02(int[][int[10,20,30],int[40,50,60]])
   pm2_02(int[][int[10,20,30]])
   pm2_03(int[][int[10,20,30],int[40,50]])
   pm2_03(int[][int[10,20,30]])
   pm2_03(int[][int[10], int[20],int[30]])
   pm2_04(int[][int[10,20], int[30,40],int[50,60]])
   pm2_04(int[][int[10,20]])
   pm2_04(int[][])
   pm2_05(int[][int[10,20], int[30,40],int[50,60]])
   pm2_05(int[][int[10,20]])
   pm2_05(int[][int[10], int[20,30],int[40,50]])
   pm2_06(int[][int[10,20,30], int[40],int[50,60]])
   pm2_06(int[][int[10,20,30]])
   pm2_06(int[][int[]])
   pm2_06(int[][])
   "---------------------------------------------\n"

// -----------------------------------------------------------------------
// Examples of pattern matching with lists of int:
// -----------------------------------------------------------------------
proc pm1_01(Value:int[])
   rule pm1_01(V1):
      "-------------------------------------- pm1_01\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> int[]\n"
      {
         V1 -> int[]
         "Pattern matched!\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm1_02(Value:int[])
   rule pm1_02(V1):
      "-------------------------------------- pm1_02\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> int[10,20,30]\n"
      {
          V1 -> int[10,20,30]
         "Pattern matched!\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm1_03(Value:int[])
   rule pm1_03(V1):
      "-------------------------------------- pm1_03\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> int[N1,N2]\n"
      {
          V1 -> int[N1,N2]
         "Pattern matched!\n"
         "N1: " $N1 "\n"
         "N2: " $N2 "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm1_04(Value:int[])
   rule pm1_04(V1):
      "-------------------------------------- pm1_04\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> int[N1::R1]\n"
      {
          V1 -> int[N1::R1]
         "Pattern matched!\n"
         "N1: " $N1 "\n"
         "R1: " out1(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm1_05(Value:int[])
   rule pm1_05(V1):
      "-------------------------------------- pm1_05\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> int[10::R1]\n"
      {
          V1 -> int[10::R1]
         "Pattern matched!\n"
         "R1: " out1(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm1_06(Value:int[])
   rule pm1_06(V1):
      "-------------------------------------- pm1_06\n"
      "V1 <- " out1(V1) "\n"
      "V1 -> L1 ~ int[N1::R1]\n"
      {
          V1 -> L1 ~ int[N1::R1]
         "Pattern matched!\n"
         "L1: " out1(L1) "\n"
         "N1: " $N1      "\n"
         "R1: " out1(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
// Examples of pattern matching with lists of lists of int:
// -----------------------------------------------------------------------
proc pm2_01(Value:int[][])
   rule pm2_01(V1):
      "-------------------------------------- pm2_01\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][]\n"
      {
         V1 -> int[][]
         "Pattern matched!\n"
      |
         "Pattern did not match!\n"
      }

// -----------------------------------------------------------------------
proc pm2_02(Value:int[][])
   rule pm2_02(V1):
      "-------------------------------------- pm2_02\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][int[10,20,30],int[40,50]]\n"
      {
          V1 -> int[][int[10,20,30],int[40,50]]
         "Pattern matched!\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm2_03(Value:int[][])
   rule pm2_03(V1):
      "-------------------------------------- pm2_03\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][L1,L2]\n"
      {
          V1 -> int[][L1,L2]
         "Pattern matched!\n"
         "L1: " out1(L1) "\n"
         "L2: " out1(L2) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm2_04(Value:int[][])
   rule pm2_04(V1):
      "-------------------------------------- pm2_04\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][L1::R1]\n"
      {
          V1 -> int[][L1::R1]
         "Pattern matched!\n"
         "L1: " out1(L1) "\n"
         "R1: " out2(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm2_05(Value:int[][])
   rule pm2_05(V1):
      "-------------------------------------- pm2_05\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][int[10,20]::R1]\n"
      {
          V1 -> int[][int[10,20]::R1]
         "Pattern matched!\n"
         "R1: " out2(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
proc pm2_06(Value:int[][])
   rule pm2_06(V1):
      "-------------------------------------- pm2_06\n"
      "V1 <- " out2(V1) "\n"
      "V1 -> int[][L1::R1]\n"
      {
          V1 -> L2 ~ int[][L1::R1]
         "Pattern matched!\n"
         "L2: " out2(L2) "\n"
         "L1: " out1(L1) "\n"
         "R1: " out2(R1) "\n"
      |
         "Pattern did not match!\n"
      }
// -----------------------------------------------------------------------
// Auxiliary predicates
// -----------------------------------------------------------------------
proc out1(L:int[])
   // Outputs L in Gentle syntax (e.g. int[10, 20, 30])
   rule out1(int[]):     "int[]"
   rule out1(int[H]):    "int[" $H "]"
   rule out1(int[H::T]): "int[" $H out11(T) "]"

proc out11(int[])
   rule out11(int[H::T]) ", " $H out11(T)
   rule out11(int[]):
// -----------------------------------------------------------------------
proc out2(L:int[][])
   // Outputs L in Gentle syntax (e.g. int[][int[10,20], int[30, 40, 50]])
   rule out2(int[][]):     "int[][]"
   rule out2(int[][H]):    "int[][" out1(H) "]"
   rule out2(int[][H::T]): "int[][" out1(H) out22(T)

proc out22(int[][])
   rule out22(int[][]):    "]"
   rule out22(int[][H::T]):", " out1(H) out22(T)
// -----------------------------------------------------------------------
// Output of this program:
//
// -------------------------------------- pm1_01
// V1 <- int[]
// V1 -> int[]
// Pattern matched!
// -------------------------------------- pm1_01
// V1 <- int[10]
// V1 -> int[]
// Pattern did not match!
// -------------------------------------- pm1_02
// V1 <- int[10, 20, 30]
// V1 -> int[10,20,30]
// Pattern matched!
// -------------------------------------- pm1_02
// V1 <- int[10, 20, 30, 40]
// V1 -> int[10,20,30]
// Pattern did not match!
// -------------------------------------- pm1_02
// V1 <- int[10, 20]
// V1 -> int[10,20,30]
// Pattern did not match!
// -------------------------------------- pm1_03
// V1 <- int[10, 20]
// V1 -> int[N1,N2]
// Pattern matched!
// N1: 10
// N2: 20
// -------------------------------------- pm1_03
// V1 <- int[10, 20, 30]
// V1 -> int[N1,N2]
// Pattern did not match!
// -------------------------------------- pm1_03
// V1 <- int[10]
// V1 -> int[N1,N2]
// Pattern did not match!
// -------------------------------------- pm1_04
// V1 <- int[10, 20, 30]
// V1 -> int[N1::R1]
// Pattern matched!
// N1: 10
// R1: int[20, 30]
// -------------------------------------- pm1_04
// V1 <- int[10]
// V1 -> int[N1::R1]
// Pattern matched!
// N1: 10
// R1: int[]
// -------------------------------------- pm1_04
// V1 <- int[]
// V1 -> int[N1::R1]
// Pattern did not match!
// -------------------------------------- pm1_05
// V1 <- int[10, 20, 30]
// V1 -> int[10::R1]
// Pattern matched!
// R1: int[20, 30]
// -------------------------------------- pm1_05
// V1 <- int[11, 20, 30]
// V1 -> int[10::R1]
// Pattern did not match!
// -------------------------------------- pm1_06
// V1 <- int[10, 20, 30]
// V1 -> L1 ~ int[N1::R1]
// Pattern matched!
// L1: int[10, 20, 30]
// N1: 10
// R1: int[20, 30]
// -------------------------------------- pm1_06
// V1 <- int[10]
// V1 -> L1 ~ int[N1::R1]
// Pattern matched!
// L1: int[10]
// N1: 10
// R1: int[]
// -------------------------------------- pm1_06
// V1 <- int[]
// V1 -> L1 ~ int[N1::R1]
// Pattern did not match!
// -------------------------------------- pm2_01
// V1 <- int[][]
// V1 -> int[][]
// Pattern matched!
// -------------------------------------- pm2_01
// V1 <- int[][int[10]]
// V1 -> int[][]
// Pattern did not match!
// -------------------------------------- pm2_01
// V1 <- int[][int[]]
// V1 -> int[][]
// Pattern did not match!
// -------------------------------------- pm2_02
// V1 <- int[][int[10, 20, 30], int[40, 50]]
// V1 -> int[][int[10,20,30],int[40,50]]
// Pattern matched!
// -------------------------------------- pm2_02
// V1 <- int[][int[10, 20, 30], int[40, 50, 60]]
// V1 -> int[][int[10,20,30],int[40,50]]
// Pattern did not match!
// -------------------------------------- pm2_02
// V1 <- int[][int[10, 20, 30]]
// V1 -> int[][int[10,20,30],int[40,50]]
// Pattern did not match!
// -------------------------------------- pm2_03
// V1 <- int[][int[10, 20, 30], int[40, 50]]
// V1 -> int[][L1,L2]
// Pattern matched!
// L1: int[10, 20, 30]
// L2: int[40, 50]
// -------------------------------------- pm2_03
// V1 <- int[][int[10, 20, 30]]
// V1 -> int[][L1,L2]
// Pattern did not match!
// -------------------------------------- pm2_03
// V1 <- int[][int[10], int[20], int[30]]
// V1 -> int[][L1,L2]
// Pattern did not match!
// -------------------------------------- pm2_04
// V1 <- int[][int[10, 20], int[30, 40], int[50, 60]]
// V1 -> int[][L1::R1]
// Pattern matched!
// L1: int[10, 20]
// R1: int[][int[30, 40], int[50, 60]]
// -------------------------------------- pm2_04
// V1 <- int[][int[10, 20]]
// V1 -> int[][L1::R1]
// Pattern matched!
// L1: int[10, 20]
// R1: int[][]
// -------------------------------------- pm2_04
// V1 <- int[][]
// V1 -> int[][L1::R1]
// Pattern did not match!
// -------------------------------------- pm2_05
// V1 <- int[][int[10, 20], int[30, 40], int[50, 60]]
// V1 -> int[][int[10,20]::R1]
// Pattern matched!
// R1: int[][int[30, 40], int[50, 60]]
// -------------------------------------- pm2_05
// V1 <- int[][int[10, 20]]
// V1 -> int[][int[10,20]::R1]
// Pattern matched!
// R1: int[][]
// -------------------------------------- pm2_05
// V1 <- int[][int[10], int[20, 30], int[40, 50]]
// V1 -> int[][int[10,20]::R1]
// Pattern did not match!
// -------------------------------------- pm2_06
// V1 <- int[][int[10, 20, 30], int[40], int[50, 60]]
// V1 -> int[][L1::R1]
// Pattern matched!
// L2: int[][int[10, 20, 30], int[40], int[50, 60]]
// L1: int[10, 20, 30]
// R1: int[][int[40], int[50, 60]]
// -------------------------------------- pm2_06
// V1 <- int[][int[10, 20, 30]]
// V1 -> int[][L1::R1]
// Pattern matched!
// L2: int[][int[10, 20, 30]]
// L1: int[10, 20, 30]
// R1: int[][]
// -------------------------------------- pm2_06
// V1 <- int[][int[]]
// V1 -> int[][L1::R1]
// Pattern matched!
// L2: int[][int[]]
// L1: int[]
// R1: int[][]
// -------------------------------------- pm2_06
// V1 <- int[][]
// V1 -> int[][L1::R1]
// Pattern did not match!
// ---------------------------------------------